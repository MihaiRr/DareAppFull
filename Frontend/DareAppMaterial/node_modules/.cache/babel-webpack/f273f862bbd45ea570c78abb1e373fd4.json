{"ast":null,"code":"import _asyncToGenerator from \"G:/Work/DareAppFull/Frontend/DareAppMaterial/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GoogleLoginProvider, FacebookLoginProvider } from 'angularx-social-login';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angularx-social-login\";\nexport class UserService {\n  constructor(authService) {\n    this.authService = authService;\n    this.isLoggedin = false; // to be used as global user\n\n    this.localUser = {\n      isLoggedIn: false,\n      email: \"guest\",\n      username: \"Guest\",\n      userType: \"Guest\",\n      userAvatar: \"https://dare.webjuice.ro/starred.png\",\n      dareCount: 0,\n      dareTypeCount: 0\n    };\n  }\n\n  ngOnInit() {\n    this.refreshToken();\n  } //social service module login\n\n\n  syncLocalUserWithSocial() {\n    this.authService.authState.subscribe(user => {\n      console.log(user);\n      this.socialUser = user; // init plugin vars  \n\n      this.isLoggedin = user != null;\n\n      if (user != null) {\n        // init locals\n        this.localUser.isLoggedIn = true;\n        this.localUser.email = this.socialUser.email;\n        this.localUser.username = this.socialUser.name;\n        this.localUser.userType = this.socialUser.provider;\n        this.localUser.userAvatar = this.socialUser.photoUrl; // push id to backend and check if already existing + get data\n      } else {\n        this.localUser = {\n          isLoggedIn: false,\n          email: \"guest\",\n          username: \"Guest\",\n          userType: \"Guest\",\n          userAvatar: \"https://dare.webjuice.ro/starred.png\",\n          dareCount: 0,\n          dareTypeCount: 0\n        };\n      }\n    });\n  } //social service module fcts\n\n\n  signInWithGoogle() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\n\n      if (_this.localUser.isLoggedIn) {\n        console.log(\"Successfully logged in with Google\");\n      }\n    })();\n  }\n\n  signInWithFB() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.authService.signIn(FacebookLoginProvider.PROVIDER_ID);\n\n      if (_this2.localUser.isLoggedIn) {\n        console.log(\"Successfully logged in with Facebook\");\n      }\n    })();\n  }\n\n  signOut() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.authService.signOut();\n      console.log(_this3.localUser.isLoggedIn);\n\n      if (!_this3.localUser.isLoggedIn) {\n        console.log(\"Successfully logged out of social\");\n      }\n    })();\n  }\n\n  refreshToken() {\n    this.authService.refreshAuthToken(GoogleLoginProvider.PROVIDER_ID);\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.SocialAuthService));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["G:/Work/DareAppFull/Frontend/DareAppMaterial/src/app/user.service.ts"],"names":["GoogleLoginProvider","FacebookLoginProvider","i0","i1","UserService","constructor","authService","isLoggedin","localUser","isLoggedIn","email","username","userType","userAvatar","dareCount","dareTypeCount","ngOnInit","refreshToken","syncLocalUserWithSocial","authState","subscribe","user","console","log","socialUser","name","provider","photoUrl","signInWithGoogle","signIn","PROVIDER_ID","signInWithFB","signOut","refreshAuthToken","ɵfac","UserService_Factory","t","ɵɵinject","SocialAuthService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { GoogleLoginProvider, FacebookLoginProvider } from 'angularx-social-login';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"angularx-social-login\";\r\nexport class UserService {\r\n    constructor(authService) {\r\n        this.authService = authService;\r\n        this.isLoggedin = false;\r\n        // to be used as global user\r\n        this.localUser = {\r\n            isLoggedIn: false,\r\n            email: \"guest\",\r\n            username: \"Guest\",\r\n            userType: \"Guest\",\r\n            userAvatar: \"https://dare.webjuice.ro/starred.png\",\r\n            dareCount: 0,\r\n            dareTypeCount: 0\r\n        };\r\n    }\r\n    ngOnInit() {\r\n        this.refreshToken();\r\n    }\r\n    //social service module login\r\n    syncLocalUserWithSocial() {\r\n        this.authService.authState.subscribe((user) => {\r\n            console.log(user);\r\n            this.socialUser = user; // init plugin vars  \r\n            this.isLoggedin = (user != null);\r\n            if (user != null) { // init locals\r\n                this.localUser.isLoggedIn = true;\r\n                this.localUser.email = this.socialUser.email;\r\n                this.localUser.username = this.socialUser.name;\r\n                this.localUser.userType = this.socialUser.provider;\r\n                this.localUser.userAvatar = this.socialUser.photoUrl;\r\n                // push id to backend and check if already existing + get data\r\n            }\r\n            else {\r\n                this.localUser = {\r\n                    isLoggedIn: false,\r\n                    email: \"guest\",\r\n                    username: \"Guest\",\r\n                    userType: \"Guest\",\r\n                    userAvatar: \"https://dare.webjuice.ro/starred.png\",\r\n                    dareCount: 0,\r\n                    dareTypeCount: 0\r\n                };\r\n            }\r\n        });\r\n    }\r\n    //social service module fcts\r\n    async signInWithGoogle() {\r\n        await this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\r\n        if (this.localUser.isLoggedIn) {\r\n            console.log(\"Successfully logged in with Google\");\r\n        }\r\n    }\r\n    async signInWithFB() {\r\n        await this.authService.signIn(FacebookLoginProvider.PROVIDER_ID);\r\n        if (this.localUser.isLoggedIn) {\r\n            console.log(\"Successfully logged in with Facebook\");\r\n        }\r\n    }\r\n    async signOut() {\r\n        await this.authService.signOut();\r\n        console.log(this.localUser.isLoggedIn);\r\n        if (!this.localUser.isLoggedIn) {\r\n            console.log(\"Successfully logged out of social\");\r\n        }\r\n    }\r\n    refreshToken() {\r\n        this.authService.refreshAuthToken(GoogleLoginProvider.PROVIDER_ID);\r\n    }\r\n}\r\nUserService.ɵfac = function UserService_Factory(t) { return new (t || UserService)(i0.ɵɵinject(i1.SocialAuthService)); };\r\nUserService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UserService, factory: UserService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}